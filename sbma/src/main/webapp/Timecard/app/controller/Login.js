/*
 * File: app/controller/Login.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Timecard.controller.Login', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            loginView: '[xst=loginView]',
            accountInformation: '[xst=accountInformation]'
        },

        control: {
            "[xst=login]": {
                tap: 'onLoginRequest'
            },
            "[xst=loginPassword]": {
                keyup: 'onPasswordfieldKeyup'
            }
        }
    },

    onLoginRequest: function(button, e, options) {
        this.validateLoginRequest();
    },

    onPasswordfieldKeyup: function(textfield, e, options) {
        if (e.event.keyCode == 13){
            this.validateLoginRequest();
        }
    },

    validateLoginRequest: function() {
        var credentialRequestModel = Ext.create("Timecard.model.CredentialRequest");
        this.getLoginView().updateRecord(credentialRequestModel);
        var errors = credentialRequestModel.validate();
        if (errors.getCount() == 0) {
            this.login(credentialRequestModel);
        } else {
            this.displayValidationErrors(errors);
        }
    },

    login: function(credentialRequestModel) {
        //var me = this;

        this.getLoginView().setMasked({
            message: 'Authenticating...'
        });

        Ext.Ajax.request({
            method: 'POST',
            url: '/sbma/rest/credential',
            timeout: 60000,
            jsonData: credentialRequestModel.getData(),
            scope: this,
            success: this.onLoginCallback,
            failure: function() {
                Ext.Msg.alert("Login", "Cannot communicate with server");
                //me.getLoginView().unmask();
                this.getLoginView().unmask();
            }
        });
    },

    displayValidationErrors: function(errors) {
        var error = errors.get(0);
        this.displayError(error.getField(), error.getMessage());
    },

    displayError: function(errorFieldName, errorMessage) {
        Ext.Msg.alert(errorFieldName, errorMessage, function() {
            var accountInformation = this.getAccountInformation();
            var errorField = accountInformation.getComponent(errorFieldName);
            if (errorField != null) {
                errorField.focus();
            }
        }, this);
    },

    onLoginCallback: function(response) {
        this.getLoginView().unmask();
        var credentialResponse = Ext.decode(response.responseText);
        if (credentialResponse.authenticationToken === null) {
            this.displayError('Login', 'Invalid user name or password');
        } else {
            var credentialResponseModel = Ext.create('Timecard.model.CredentialResponse', credentialResponse);
            Timecard.controller.EventBus.fireLoginEvent(credentialResponseModel);
        }
    }

});
/*
 * File: app/controller/TimeCardEditor.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Timecard.controller.TimeCardEditor', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            editTimeCardItemButton: '[xst=editTimeCardItemButton]',
            saveTimeCardItemButton: '[xst=saveTimeCardItemButton]',
            timeCardEditor: '[xst=timeCardEditor]',
            timeCardEditorItemList: '[xst=timeCardEditorItemList]',
            timeCardEditorItemForm: '[xst=timeCardEditorItemForm]'
        },

        control: {
            "[xst=timeCardEditorEmployeeList]": {
                itemtap: 'onTimeCardEditorEmployeeListTap'
            },
            "[xst=timeCardEditorItemList]": {
                activate: 'onTimeCardEditorItemListActivate',
                deactivate: 'onTimeCardEditorItemListDeactivate'
            },
            "[xst=editTimeCardItemButton]": {
                tap: 'onEditTimeCardItemButtonTap'
            },
            "[xst=timeCardEditorItemForm]": {
                activate: 'onTimeCardEditorItemFormActivate',
                deactivate: 'onTimeCardEditorItemFormDeactivate'
            },
            "[xst=saveTimeCardItemButton]": {
                tap: 'onSaveTimeCardItemButtonTap'
            }
        }
    },

    onTimeCardEditorEmployeeListTap: function(dataview, index, target, record, e, options) {
        var employeeId = record.get('id');
        var title = record.get('firstName') + ' ' + record.get('lastName');
        var store = Ext.getStore('timeCardEditor');
        store.loadTimeCardItems(this.authenticationToken, employeeId);
        var timeCardItemEditorList = Ext.create('Timecard.view.TimeCardEditorItemList');
        timeCardItemEditorList.setTitle(title);
        this.getTimeCardEditor().push(timeCardItemEditorList);
    },

    onTimeCardEditorItemListActivate: function(container, newActiveItem, oldActiveItem, options) {
        this.getEditTimeCardItemButton().show();
    },

    onTimeCardEditorItemListDeactivate: function(container, newActiveItem, oldActiveItem, options) {
        this.getEditTimeCardItemButton().hide();
    },

    onEditTimeCardItemButtonTap: function(button, e, options) {
        var selection = this.getTimeCardEditorItemList().getSelection();
        if (selection.length == 0) {
            Ext.Msg.alert('Edit', 'Please select an item and try again');
        } else {
            var timeCardItemModel = selection[0];
            var form = Ext.create('Timecard.view.TimeCardEditorItemForm');
            form.setRecord(timeCardItemModel);
            var title = this.getTimeCardEditor().getActiveItem().getTitle();
            form.setTitle(title);
            this.getTimeCardEditor().push(form);
        }
    },

    onTimeCardEditorItemFormActivate: function(container, newActiveItem, oldActiveItem, options) {
        this.getSaveTimeCardItemButton().show();

    },

    onTimeCardEditorItemFormDeactivate: function(container, newActiveItem, oldActiveItem, options) {
        this.getSaveTimeCardItemButton().hide();
    },

    onSaveTimeCardItemButtonTap: function(button, e, options) {
        console.log('onSaveTimeCardItemButtonTap');
        var form = this.getTimeCardEditorItemForm().getForm();
        if (form.isValid()) {
            var values = form.getValues();
            Ext.Ajax.request({
                method: 'POST',
                url: '/sbma/rest/timeCardItem',
                timeout: 60000,
                jsonData: values,
                scope: this,
                success: this.onLoginCallback,
                failure: function(response, options) {
                    Ext.Msg.alert("Edit", "Cannot communicate with server");
                }
            });
        }
    },

    init: function(application) {
        Timecard.controller.EventBus.addLoginListener(this.onLogin, this);
    },

    onLogin: function(credentialResponseModel) {
        this.authenticationToken = credentialResponseModel.get('authenticationToken');
    }

});